searchState.loadedDescShard("scheduler", 0, "A task failed due to panic.\nEvents emitted to the Process Activity Log.\nMap of tasks waiting on other tasks to complete.\nNotify tasks waiting on <code>target</code>, returning the list of …\nNotify tasks waiting on an I/O resource.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty <code>WaitMap</code>.\nEmit a PAL event.\nRemove a specific waiter from a target’s wait list.\nRecord that <code>waiter</code> is waiting for <code>target</code> to finish.\nRecord that <code>waiter</code> is waiting for the I/O resource …\nSource of I/O readiness that can be registered with […\nUnique identifier for this source.\nReturn the raw file descriptor associated with this source.\nEntry in the ready queue representing a runnable task.\nPriority queue of runnable task IDs.\nReturns <code>true</code> if the queue already contains <code>tid</code>.\nPush a task ID without checking for duplicates. Used only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue has no tasks.\nReturns the number of tasks in the queue.\nCreate an empty ready queue.\nPop the next task ID from the queue.\nTask priority. Lower values run first.\nPush a task entry onto the queue.\nSequence counter to maintain FIFO ordering for equal …\nIdentifier of the runnable task.\nDefault priority assigned to user tasks.\nPriority level reserved for internal system tasks.\nCore runtime orchestrator managing runnable tasks, pending …\nSnapshot of runtime state used for diagnostics.\nCancel a task by TaskId, scheduling it for cooperative …\nCapture a diagnostic snapshot of the scheduler state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a handle that can be used to signal I/O readiness …\nCreate a new Scheduler instance.\nNext task identifier to be assigned.\nCheck if the ready queue is empty.\nReturn the number of tasks currently in the ready queue.\nDirectly push a task ID into the ready queue without …\nNumber of tasks currently in the ready queue.\nRun the scheduler loop, processing system calls from tasks.\nCount of sleeping tasks waiting on a timer.\nSpawn a new coroutine task with default priority (10).\nSpawn a new coroutine task reserved for internal system …\nSpawn a new coroutine task with dependencies (DAG support).\nSpawn a new coroutine task with a specific priority.\nStart the scheduler loop on a dedicated thread.\nTerminal states recorded for finished tasks.\nTotal number of active tasks.\nRetrieve the recorded state of a task if known.\nCancel another task immediately\nSignal that the task is complete\nBlock until the given I/O resource is ready\nWait for another task to finish\nWait for a task to finish but resume after a timeout\nPrint a log message\nSleep for the given duration (blocking for now)\nRepresents a system call yielded by a coroutine task.\nCooperatively yield control back to the scheduler\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe task completed, with a reason.\nThe task is waiting for dependencies to be resolved.\nThe task is ready to be scheduled.\nThe task is currently running.\nA wrapper around a running coroutine and its metadata.\nReason for task completion.\nShared context passed into each task.\nUnique identifier for a task.\nRepresents the lifecycle state of a task.\nWhether the task has been cancelled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCoroutine handle backing the task.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the current task has been cancelled.\nScheduling priority (0 = highest).\nCurrent lifecycle state of the task.\nSubmit a system call from the current task.\nUnique identifier for the task.\nYield back to the scheduler without performing a system …")