//! Process Activity Log events emitted by the daemon.
//!
//! This module provides a minimal in-memory PAL implementation so that tests can
//! verify lifecycle events. Each event is recorded and also logged via
//! `tracing`.

use lazy_static::lazy_static;
use std::sync::Mutex;

/// PAL events generated by the daemon.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum DaemonEvent {
    /// The daemon received a shutdown signal and is beginning shutdown.
    ShutdownBegin,
    /// All shutdown work has completed and the daemon is exiting.
    ShutdownComplete,
    /// The WAL flush task has started.
    WalFlushStart,
    /// The WAL flush task finished execution.
    WalFlushFinish,
    /// The metrics task has started.
    MetricsStart,
    /// The metrics task finished execution.
    MetricsFinish,
}

lazy_static! {
    static ref EVENTS: Mutex<Vec<DaemonEvent>> = Mutex::new(Vec::new());
}

/// Emit a daemon PAL event.
pub fn emit(event: DaemonEvent) {
    EVENTS.lock().unwrap().push(event.clone());
    tracing::info!(?event, "pal_event");
}

/// Return all recorded events and clear the internal buffer.
pub fn take_events() -> Vec<DaemonEvent> {
    EVENTS.lock().unwrap().drain(..).collect()
}
